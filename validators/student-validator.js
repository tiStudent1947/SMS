const { z } = require('zod');

const StudentsignupSchema = z.object({
  // Student's Details
  profileImage: z.string().optional(),

  enrollmentNo: z.string().min(1, 'Enrollment No is required'),
  exam: z.string().min(1, 'Exam is required'),
  stream: z.string().min(1, 'Stream is required'),
  rank: z.string().min(1, 'Rank is required'),
  name: z.string().min(1, 'Name is required'),
  address: z.string().min(1, 'Address is required'),
  district: z.string().min(1, 'District is required'),
  pin: z.coerce.number({ invalid_type_error: 'Pin must be a number' }),
  state: z.string().min(1, 'State is required'),
  phone: z.string().min(1, 'Phone is required'),
  mobile: z.string().min(1, 'Mobile is required'),
  email: z.string().email('Invalid email address'),
  website: z.string().min(1, 'Website is required'),
  dob: z.string().min(1, 'DOB is required'),
  placeOfBirth: z.string().min(1, 'Place of Birth is required'),
  bloodGroup: z.string().min(1, 'Blood Group is required'),
  gender: z.string().min(1, 'Gender is required'),
  nationality: z.string().min(1, 'Nationality is required'),
  passport: z.string().min(1, 'Passport is required'),
  caste: z.string().min(1, 'Caste is required'),
  religion: z.string().min(1, 'Religion is required'),

  // Father's Details
  fatherName: z.string().min(1, 'Father Name is required'),
  fatherOccupation: z.string().min(1, 'Father Occupation is required'),
  fatherDesignation: z.string().min(1, 'Father Designation is required'),
  fatherOrgName: z.string().min(1, 'Father Org Name is required'),
  fatherOrgAddress: z.string().min(1, 'Father Org Address is required'),
  fatherDistrict: z.string().min(1, 'Father District is required'),
  fatherAge: z.coerce.number({ invalid_type_error: 'Father Age must be a number' }),
  fatherPin: z.coerce.number({ invalid_type_error: 'Father Pin must be a number' }),
  fatherState: z.string().min(1, 'Father State is required'),
  fatherPhone: z.string().min(1, 'Father Phone is required'),
  fatherMobile: z.string().min(1, 'Father Mobile is required'),
  fatherEmail: z.string().min(1, 'Father Email is required'),
  fatherWebsite: z.string().min(1, 'Father Website is required'),
  fatherPan: z.string().min(1, 'Father PAN is required'),
  fatherVoterId: z.string().min(1, 'Father Voter ID is required'),
  fatherPassport: z.string().min(1, 'Father Passport is required'),
  fatherAnnualIncome: z.coerce.number({ invalid_type_error: 'Father Annual Income must be a number' }),
  fatherClub: z.string().min(1, 'Father Club is required'),

  // Mother's Details
  motherName: z.string().min(1, 'Mother Name is required'),
  motherOccupation: z.string().min(1, 'Mother Occupation is required'),
  motherDesignation: z.string().min(1, 'Mother Designation is required'),
  motherOrgName: z.string().min(1, 'Mother Org Name is required'),
  motherOrgAddress: z.string().min(1, 'Mother Org Address is required'),
  motherDistrict: z.string().min(1, 'Mother District is required'),
  motherAge: z.coerce.number({ invalid_type_error: 'Mother Age must be a number' }),
  motherPin: z.coerce.number({ invalid_type_error: 'Mother Pin must be a number' }),
  motherState: z.string().min(1, 'Mother State is required'),
  motherPhone: z.string().min(1, 'Mother Phone is required'),
  motherMobile: z.string().min(1, 'Mother Mobile is required'),
  motherEmail: z.string().min(1, 'Mother Email is required'),
  motherWebsite: z.string().min(1, 'Mother Website is required'),
  motherPan: z.string().min(1, 'Mother PAN is required'),
  motherVoterId: z.string().min(1, 'Mother Voter ID is required'),
  motherPassport: z.string().min(1, 'Mother Passport is required'),
  motherAnnualIncome: z.coerce.number({ invalid_type_error: 'Mother Annual Income must be a number' }),
  motherClub: z.string().min(1, 'Mother Club is required'),

  // Guardian's Details
  guardianName: z.string().min(1, 'Guardian Name is required'),
  guardianOccupation: z.string().min(1, 'Guardian Occupation is required'),
  guardianDesignation: z.string().min(1, 'Guardian Designation is required'),
  guardianOrgName: z.string().min(1, 'Guardian Org Name is required'),
  guardianOrgAddress: z.string().min(1, 'Guardian Org Address is required'),
  guardianDistrict: z.string().min(1, 'Guardian District is required'),
  guardianAge: z.coerce.number({ invalid_type_error: 'Guardian Age must be a number' }),
  guardianPin: z.coerce.number({ invalid_type_error: 'Guardian Pin must be a number' }),
  guardianState: z.string().min(1, 'Guardian State is required'),
  guardianPhone: z.string().min(1, 'Guardian Phone is required'),
  guardianMobile: z.string().min(1, 'Guardian Mobile is required'),
  guardianEmail: z.string().min(1, 'Guardian Email is required'),
  guardianWebsite: z.string().min(1, 'Guardian Website is required'),
  guardianPan: z.string().min(1, 'Guardian PAN is required'),
  guardianVoterId: z.string().min(1, 'Guardian Voter ID is required'),
  guardianPassport: z.string().min(1, 'Guardian Passport is required'),
  guardianAnnualIncome: z.coerce.number({ invalid_type_error: 'Guardian Annual Income must be a number' }),
  guardianClub: z.string().min(1, 'Guardian Club is required'),
  guardianSex: z.string().min(1, 'Guardian Sex is required'),

  // Academic Records 10th
  tenInstitute: z.string().min(1, '10th Institute is required'),
  tenBoard: z.string().min(1, '10th Board is required'),
  tenTotalMarks: z.coerce.number({ invalid_type_error: '10th Total Marks must be a number' }),
  tenPercentage: z.coerce.number({ invalid_type_error: '10th Percentage must be a number' }),
  tenYearPassing: z.coerce.number({ invalid_type_error: '10th Year of Passing must be a number' }),

  // Academic Records 10+2
  ten2Institute: z.string().min(1, '12th Institute is required'),
  ten2Board: z.string().min(1, '12th Board is required'),
  ten2TotalMarks: z.coerce.number({ invalid_type_error: '12th Total Marks must be a number' }),
  ten2YearPassing: z.coerce.number({ invalid_type_error: '12th Year of Passing must be a number' }),

  // Subjects
  physicsMarks: z.coerce.number({ invalid_type_error: 'Physics Marks must be a number' }),
  physicsTotal: z.coerce.number({ invalid_type_error: 'Physics Total must be a number' }),
  chemistryMarks: z.coerce.number({ invalid_type_error: 'Chemistry Marks must be a number' }),
  chemistryTotal: z.coerce.number({ invalid_type_error: 'Chemistry Total must be a number' }),
  mathMarks: z.coerce.number({ invalid_type_error: 'Math Marks must be a number' }),
  mathTotal: z.coerce.number({ invalid_type_error: 'Math Total must be a number' }),
  totalMarks: z.coerce.number({ invalid_type_error: 'Total Marks must be a number' }),
  totalPercentage: z.coerce.number({ invalid_type_error: 'Total Percentage must be a number' }),
});

module.exports = { StudentsignupSchema };